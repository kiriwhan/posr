#                                                               "method_2_2"))
# )
),
mainPanel(
tabsetPanel(id ="methodtabs",
tabPanel(title = "First Method Plot", value="panel1",
plotOutput("method_1_tab1")),
tabPanel(title = "method_2_output1", value="panel2",
tableOutput("m2_output1"))
)
)),
server=shinyServer(function(input, output, session) {
output$nams = renderUI({
selectInput("TESTNAME", strong("Choose an ID for method 2"),
choices=c("Select", rownames(plantInfo)[1:3]))
})
output$m2_output1 = renderText({
"randomtext, ID=1"
})
#               values <- reactive({
#                 validate(
#                   return(list(sel=input$TESTNAME))
#                 )
#                   })
#
observe({
if (input$goButton){ #input$test == "method_2") {
#                     updateTabsetPanel(session, inputId="methodtabs", selected="panel1")
if (input$TESTNAME == "Select"){
updateTabsetPanel(session, inputId="methodtabs", selected="panel1")
}
else if (input$TESTNAME != "Select") {
updateTabsetPanel(session, inputId="methodtabs", selected="panel2")
}
})
))
runApp(list(ui=shinyUI(pageWithSidebar(
headerPanel("Plant Identification"),
sidebarPanel(
h4('Switch Tabs Based on Selection'),
uiOutput('nams'),
actionButton("goButton", "Go!")
#                 selectInput(inputId="test", label="",
#                               choices = list("NA", "method_2"))
#                 conditionalPanel("input.method== 'method_2' ",
#                                  selectInput("method_2_ID", strong("Choose an ID for method 2"),
#                                              choices = list("method_2_1",
#                                                             "method_2_2"))
#                 )
#conditionalPanel("input.method == 'method_2' ",
#                                    selectInput("method_2_ID", strong("Choose an ID for method 2"),
#                                                choices = list("method_2_1",
#                                                               "method_2_2"))
# )
),
mainPanel(
tabsetPanel(id ="methodtabs",
tabPanel(title = "First Method Plot", value="panel1",
plotOutput("method_1_tab1")),
tabPanel(title = "method_2_output1", value="panel2",
tableOutput("m2_output1"))
)
)),
server=shinyServer(function(input, output, session) {
output$nams = renderUI({
selectInput("TESTNAME", strong("Choose an ID for method 2"),
choices=c("Select", rownames(plantInfo)[1:3]))
})
output$m2_output1 = renderText({
"randomtext, ID=1"
})
#               values <- reactive({
#                 validate(
#                   return(list(sel=input$TESTNAME))
#                 )
#                   })
#
observe({
if (input$goButton){ #input$test == "method_2") {
#                     updateTabsetPanel(session, inputId="methodtabs", selected="panel1")
if (input$TESTNAME == "Select"){
updateTabsetPanel(session, inputId="methodtabs", selected="panel1")
}
else if (input$TESTNAME != "Select") {
updateTabsetPanel(session, inputId="methodtabs", selected="panel2")
}
})
))
runApp(list(ui=shinyUI(pageWithSidebar(
headerPanel("Plant Identification"),
sidebarPanel(
h4('Switch Tabs Based on Selection'),
uiOutput('nams'),
actionButton("goButton", "Click to see plant")
#                 selectInput(inputId="test", label="",
#                               choices = list("NA", "method_2"))
#                 conditionalPanel("input.method== 'method_2' ",
#                                  selectInput("method_2_ID", strong("Choose an ID for method 2"),
#                                              choices = list("method_2_1",
#                                                             "method_2_2"))
#                 )
#conditionalPanel("input.method == 'method_2' ",
#                                    selectInput("method_2_ID", strong("Choose an ID for method 2"),
#                                                choices = list("method_2_1",
#                                                               "method_2_2"))
# )
),
mainPanel(
tabsetPanel(id ="methodtabs",
tabPanel(title = "First Method Plot", value="panel1",
plotOutput("method_1_tab1")),
tabPanel(title = "method_2_output1", value="panel2",
tableOutput("m2_output1"))
)
)),
server=shinyServer(function(input, output, session) {
output$nams = renderUI({
selectInput("TESTNAME", strong("Choose an ID for method 2"),
choices=c("Select", rownames(plantInfo)[1:3]))
})
output$m2_output1 = renderText({
"randomtext, ID=1"
})
#               values <- reactive({
#                 validate(
#                   return(list(sel=input$TESTNAME))
#                 )
#                   })
#
observe({
if (input$goButton){ #input$test == "method_2") {
#                     updateTabsetPanel(session, inputId="methodtabs", selected="panel1")
if (input$TESTNAME == "Select"){
updateTabsetPanel(session, inputId="methodtabs", selected="panel1")
}
else if (input$TESTNAME != "Select") {
updateTabsetPanel(session, inputId="methodtabs", selected="panel2")
}
})
))
shiny::runApp()
library(shiny)
library(gdata)
library(jpeg)
library(ggplot2)
library(gridExtra)
load("posr_databaseInfo.RData")
load("posr_plantInfo.RData")
# Plant Type
Plant.Type.Generic <-  c("tree", "shrub", "grass", "vine", "climber", "herb", "fern","palm",
"orchid", "rush", "sedge", "moss", "aquatic", "epiphyte", "epilith",
"clinber", "Tripogon", "shub", "Centrolepis")
shiny::runApp()
library(shiny)
source("global.R")
plantInfo$PlantType
plantInfo$FlowerSeason
shiny::runApp()
test <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
dim(test)
test <- read.table("../plantDatabaseV1/posrexel_V2.csv",header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
test <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
stringsAsFactors=FALSE)
test[106, ]$Also.
test[1:100,1]
test[100:200,1]
test[200:300,1]
test[300:400,1]
test[400:500,1]
test[500:600,1]
test[500:510,1]
test[500:520,1]
test[520,1]
test[519,1]
test[518,1]
test[519,]$Associates.
nam
nam <- names(test)
nam
test[519,]$Associates.
test[519,1]
test[518,1]
test[518,46]
test[518,47]
test[518,]
nam
test[518,77]
test[518,76]
test[518,]
test[518,1]
test[518,2]
test[518,3]
test[518,5]
test[518,6]
test[518,7]
test[518,14]
test[518,30]
test[518,3`]
test[518,31]
test2 <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
test2[518,1]
test2[519,1]
names(test2)
test2[519,5]
test2[519,31]
test2[519,30]
test2[519,]
test2[518,30]
test2[518,31]
dim(test2)
78-31
c(rep("character", 30), "NULL",rep("character", 47))
test2 <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE,
colClasses=c(rep("character", 30), "NULL",rep("character", 47)))
test2[518,31]
test2[518,30]
test2[500:550,1]
dim(test2)
test2 <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE,
colClasses=c(rep("character", 30), rep("NULL", 38)))
test2[500:550,1]
test2 <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
dim(test2)
test2[500:550,1]
test2[500:600,1]
test2[600:700,1]
test2[700:800,1]
test2[800:1000,1]
test2[1000:1200,1]
test2[1179,1]
test2[1178,1]
test2[1178,1:4]
test2[1178,2]
test2[1178,3]
test2 <- read.table("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
test2[1178,3]
test2[1179,1]
dim(test2)
test2[1100:1500,1]
test2[1100:1200,1]
test2[1198,1]
test2[1197,1]
test2[1196,1]
test2[1196,]
test2[1196,]$Common.Names.
test2[1196,]$Common.Names
test2[1196,1]
test2 <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
dim(test2)
test2[,1]
test2 <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE,
fill=TRUE, stringsAsFactors=FALSE)
dim(test2)
test2[,1]
# plantDisp <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE)
save(plantDisp, file="posr_databaseInfo.RData")
plantDisp <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE)
save(plantDisp, file="posr_databaseInfo.RData")
load("posr_databaseInfo.RData")
dim(plantDisp)
plantDisp[,1]
shiny::runApp()
xs <-  1:length(plantInfo$PlantType)
ys <- 1:length(plantInfo$LeafLength.cm.)
zs <-  1:length(plantInfo$FlowerSeason)
LNs <- grep("bank", plantDisp$Latin.Name, ignore.case=TRUE)
LNs
plantDisp$Latin.Name
LNs <- grep("bank", plantDisp$Latin.Name, ignore.case=TRUE)
plantDisp$Latin.Name[1993]
plantDisp$Latin.Name[1994]
plantDisp$Latin.Name[2378]
fnames <- plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode #
fnames
l <- as.character(plantDisp[which(plantDisp$Ncode %in% unlist(fnames),]$Latin.Name))
l <- as.character(plantDisp[which(plantDisp$Ncode %in% unlist(fnames)),]$Latin.Name)
l
sort(l)
shiny::runApp()
which(plantDisp[,1] == "psca2348")
plantDisp[1811,1]
plantDisp[1811,]
plantDisp[1811,]$Latin.Name.
plantDisp[1811,]$Latin.Name
plantDisp <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE, strip.white=TRUE)
plantDisp[1811,]$Latin.Name
save(plantDisp, file="posr_databaseInfo.RData")
load("posr_databaseInfo.RData")
plantDisp[1811,]$Latin.Name
shiny::runApp()
plantDisp[1993, 1]
plantDisp[1993, ]$Latin.Name
plantDisp[1994, ]$Latin.Name
plantDisp[2378, ]$Latin.Name
plantDisp[2378, 1]
plantDisp <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE, strip.white=TRUE)
plantDisp[2378, ]$Latin.Name
save(plantDisp, file="posr_databaseInfo.RData")
load("posr_databaseInfo.RData")
shiny::runApp()
plantInfo$FlowerSeason
shiny::runApp()
library(shiny)
library(gdata)
library(jpeg)
library(ggplot2)
library(gridExtra)
load("posr_databaseInfo.RData")
indir <- "../plantDatabaseV1/snpres/"
indir <- "../plantDatabaseV1/snpres/tcmimages"
ls()
plantDisp$Ncode[1]
a=plantDisp$Ncode[1]
apply(as.matrix(1:5), function(a2) list.files(paste(indir, a2, sep=""), pattern=a))
apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a))
apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE))
unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
tmp <- readJPEG(unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE))))
tmp
pics <- apply(plantDisp$Ncode, 1, function(a) {
readJPEG(unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE))))
})
pics <- apply(as.matrix(plantDisp$Ncode), 1, function(a) {
readJPEG(unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE))))
})
apply(as.matrix(plantDisp$Ncode), 1, function(a) {
print(a)
readJPEG(unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE))))
})
a="paav2425"
apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE))
a2
readJPEG(
list(a=readJPEG(tmp))
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
tmp
a="paap2152"
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
tmp
list(a=readJPEG(tmp))
test=list(a=readJPEG(tmp))
names(test)
pics <- apply(as.matrix(plantDisp$Ncode), 1, function(a) {
print(a)
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
if(length(tmp) > 0){
tmp2 <- readJPEG(tmp)
return(tmp2)
}
})
readJPEG(tmp)
a
tmp2 <- list(pic=readJPEG(tmp), nam = get(a))
tmp2 <- list(pic=readJPEG(tmp), nam = a)
names(tmp2)
tmp2$nam
pics <- apply(as.matrix(plantDisp$Ncode), 1, function(a) {
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
if(length(tmp) > 0){
tmp2 <- list(pic=readJPEG(tmp), nam = a)
return(tmp2)
}
})
pics <- apply(as.matrix(plantDisp$Ncode), 1, function(a) {
print(a)
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
if(length(tmp) > 0){
tmp2 <- list(pic=readJPEG(tmp), nam = a)
return(tmp2)
}
})
a="phst1417"
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
tmp
length(tmp) > 0
ist(pic=readJPEG(tmp), nam = a)
readJPEG(tmp)
tmp
a
tmp2 <- list(pic=try(readJPEG(tmp)), nam = a)
try(readJPEG(tmp)
)
try(readJPEG(tmp), silent=T)
pics <- apply(as.matrix(plantDisp$Ncode), 1, function(a) {
print(a)
tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
if(length(tmp) > 0){
tmp2 <- list(pic=try(readJPEG(tmp), silent=TRUE), nam = a)
return(tmp2)
}
})
length(pics)
names(pics[[1]])
pics$nam
pics[[1]]$nam
plantPics <- pics
save(plantPics, file="posr_plantPics.RData")
month.abb
shiny::runApp()
which(plantDisp[,1] == "pbba867")
plantDisp[102, ]$FlowersMonths
plantDisp[102, ]$FlowerMonths
plantDisp$FruitType
plantInfo$FruitType
shiny::runApp()
plantInfo$FruitType
levels(plantInfo$FruitType)
plantInfo <- read.xls("posrexel.xlsx", header=TRUE, sheet=2)
save(plantInfo, file="posr_plantInfo.RData")
letters
grep(paste(c(letters), collapse-"|"), levels(plantInfo$FruitType))
grep(paste(c(letters), collapse="|"), levels(plantInfo$FruitType))
which(letters %in% levels(plantInfo$FruitType))
letters[which(letters %in% levels(plantInfo$FruitType))]
shiny::runApp()
z="a"
y="a"
shiny::runApp()
which(plantInfo$FruitType == input$y)
grep("a", plantInfo$FruitType)
shiny::runApp()
which(substr(plantInfo$Ncode, 2, 2) == substr(input$x, 1, 1))
x="aquatic"
grep(substr(input$x, 1, 1),substr(plantInfo$Ncode, 2, 2) )
grep(substr(x, 1, 1),substr(plantInfo$Ncode, 2, 2) )
substr(x, 1, 1)
substr(plantInfo$Ncode, 2, 2)
which(substr(plantInfo$Ncode, 2, 2) %in% c(substr(x, 1, 1), "b"))
grep(substr(x, 1, 1),substr(plantInfo$Ncode, 2, 2) )
length(plantInfo$PlantType)
length(plantInfo$FruitType)
length(plantInfo$FlowerMonths)
length(plantInfo$PlantType)
plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode
LNs <-  1:length(plantInfo$PlantType)
plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode
shiny::runApp()
LNs <- 1:length(plantInfo$PlantType)
LNs
ys <- 1:length(plantInfo$FruitType)
zs <-  1:length(plantInfo$FlowerMonths)
xs <-  1:length(plantInfo$PlantType)
plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode
length(plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode)
fnames <- plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode #
shiny::runApp()
# to deploy the app:
# shinyapps::deployApp('/Users/kiriwhan/shiny/posr')
library(shiny)
library(gdata)
library(jpeg)
library(ggplot2)
library(gridExtra)
# plantDisp <- read.csv("../plantDatabaseV1/posrexel_V2.csv", sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE, strip.white=TRUE)
# save(plantDisp, file="posr_databaseInfo.RData")
load("posr_databaseInfo.RData")
# plantInfo <- read.xls("posrexel.xlsx", header=TRUE, sheet=2)
# save(plantInfo, file="posr_plantInfo.RData")
load("posr_plantInfo.RData")
Plant.Type.Generic <-  c( "aquatic", "climber", "fern", "grass", "herb", "orchid", "shrub", "tree")
Plant.Type.Code <- c("a", "c", "f", "g", "h", "o", "s", "t", "b")
Flower.Season.Generic <-  c( "a", "A", "E", "W", "g", "G", "s", "S")
Fruit.Type.Generic <- c("b", "c", "d", "e", "f", "g", "h", "i", "j", "m", "n", "o", "p",
"q", "s", "t", "u", "v", "w", "x", "y", "z")
## have all pics loaded and saved as .RData
# indir <- "../plantDatabaseV1/snpres/tcmimages"
# plantPics <- apply(as.matrix(plantDisp$Ncode), 1, function(a) {
#   tmp <- unlist(apply(as.matrix(1:5), 1, function(a2) list.files(paste(indir, a2, sep=""), pattern=a, full.names=TRUE)))
#   if(length(tmp) > 0){
#   tmp2 <- list(pic=try(readJPEG(tmp), silent=TRUE), nam = a)
#   return(tmp2)
#   }
# })
# save(plantPics, file="posr_plantPics.RData")
# load(file="posr_plantPics.RData")
input=list(x="Not sure", y="Not sure", z="Not sure", searchLN="Not sure")
input$x
if(input$x == "Not sure") {
xs <-  1:length(plantInfo$PlantType)
} else if(input$x %in% c("aquatic", "climber", "fern", "grass", "herb", "orchid")) {
xs <- which(substr(plantInfo$Ncode, 2, 2) == substr(input$x, 1, 1))
} else if(input$x %in% c("shrub", "tree")){
xs <- which(substr(plantInfo$Ncode, 2, 2) %in% c(substr(input$x, 1, 1), "b"))
}
if(input$y == "Not sure") { ys <- 1:length(plantInfo$FruitType) } else { ys <- grep(input$y, plantInfo$FruitType) }
if(input$z == "Not sure") { zs <-  1:length(plantInfo$FlowerMonths)  } else { zs <- grep(input$z, plantInfo$FlowerMonths) }
if(input$searchLN == "NA") {
LNs <-  1:length(plantInfo$PlantType)
} else { LNs <- grep(input$searchLN, plantDisp$Latin.Name, ignore.case=TRUE)}
fnames <- plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode #
fnames
xs
ys
zs
LNs
input$searchLN
input=list(x="Not sure", y="Not sure", z="Not sure", searchLN="NA")
if(input$searchLN == "NA") {
LNs <-  1:length(plantInfo$PlantType)
} else { LNs <- grep(input$searchLN, plantDisp$Latin.Name, ignore.case=TRUE)}
LNs
fnames <- plantDisp[intersect(intersect(intersect(xs, ys), zs), LNs), ]$Ncode #
fnames
shiny::runApp()
